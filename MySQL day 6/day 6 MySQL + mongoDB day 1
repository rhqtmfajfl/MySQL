day 6

SQLD 자격 시험
https://www.dataq.or.kr/www/sub/a_04.do

[평가]
필기
13 * 3 --> 39

실기 
SQL 
10 * 4 --> 40
JDBC -- >> 21점


My SQL과 JDBC -> 학습

MYSQL과 JDBC는 5일정도  -> mongoDB: 3일 -> Servlet&JSP: 7일   -> Project 1 : 3일




Mongd DB는 자바 스크립트를 사용한다. 

SQL문을 안쓴다.


자바 스크립트에서 CRUD 구문은 단순하다

객체에 접근할때는 . 연산자 만 익숙하면 익히는데 어려움이 없다

MYSQL도 관계형 릴레이션 중에 하나이다.

NOSQL 데이터베이스 중에서 대표적인 것이 몽고디비이다.

릴레이션 디비와 노 SQL의 차이는 뭔가?

->노 SQL 디비를 쓰면 릴레이션 디비보다 어떤점이 좋을까?

데이터에 따라서 노 SQL 이나 릴레이션이 어떤것이 좋아지는다.

데이터를 꺼내올 때 조건 주고 꺼내오는데 릴레이셔널 디비에서는 SELECT FROM WHERE 

노 에스큐엘에서는 어떻게 적용할까

몽고디비에서 CRUD 하는 방법

릴레이션에서는 자바가 API를 이미 내장하고 있다.


노에스큐엘은 API를 준비해야 한다.

몽고디비에서는 어떤구조로 데이터로 다뤄야하는지

자바스크립트로 몽고디비 CRUD 방법 익히고

자바로 몽고디비 사용하는 방법ㅂ 익힌다.


스프링에서도 몽고디비 사용

몽고디비와 궁합이 잘 맞는 것이 노드 JS이다.


노드 JS로도 스프링으로 도 몽고디비 연동 가능

학습을 위해서 자바를 사용

몽고디비 사용시 더큰 데이터 사용 가능


기존의 릴레이션 디비는 저장용량을 키우려면 컴퓨터 성능을 높여야 하는데 이것을 스케일 업이라고 한다. 

스케일 업이 비용이 훨씬더 많이 든다.

빅데이터 시대가 되면서 대용량 데이터를 다루는데 


프로젝트 할때 데이터베이스를 두개 다사용 일부 마이에스큐엘 일부 몽고디비에 사용

실무 프로젝트도 데이터의 성격에 따라서 MYSQL MONGODB로 나뉜다.




몽고디비

day 1

no sql은 sql 뿐만 아니라 다른 기능도 지원하고 있다.


몽고디비는 도큐먼트 데이터베이스 이다.
몽고디비에서는 테이블을 만들지 않는다.

데이터를 저장할 collection이라고 하는 것을 만든다.

이안에 데이터를 저장할 때는 

릴레이션에서는 컬럼이 다정해져있었지만

릴레이션 데이터베이스 시스템은 이미 만들어져 있는 테이블에 맞춰서 저장할 수 있다.

정해져있는 규격의 데이터를 정형 데이터라고 한다.

노 에스큐엘은
데이터를 저장할때 어떤 데이터를 넣어도 된다. 

key value 형식으로 저장한다.

이때 json이라는 형식으로 key value 값을 젖아

json - javaScript Object Notation의 약어이다.

자바 스크립트는 서버단에서 사용되는 웹프로그래밍에서 사용된다.

자바에서도 머신러닝을 돌릴 수 있다.



json에서 정한 문서 작성규칙은 자바스크립트 오브젝트 노테이션이다.
자바스크립트에서 카:value 방법

json이라는 구조로 데이터를 저장하고 다룰 수 있다.


1페이지 어떻게 발전했고 그런것들 그냥 읽어 보면 된다.


노 에스큐엘은 sql을 사용하지 않아도 데이터를 처리 할 수 있다.


릴레이션에서는 sql을 꼭 알아야 된다. 하지만 노 에스큐엘 서버는 정의되어 있는 질의어가 없다.
데이터 베이스는 여러 테이블로 저장되어있어 조인을 사요하지만

노 sql은 저장되느 형식을 고정 시키지 않는다. 비정형 반정형








//////////////////////////////////////////////



















////////////////////////////////////////////

19페이지



db 라는 내장 객체

show dbs

를 하면 안에 admin
config
local을 볼 수 있다.


우리는 교육용 데이터 베이스를 만든다.

이름은 edudb


use edudb 지정된 데이터 베이스가 만들어 지지 않으면 그것을 만드는 기능도 하낟.

use 로 데이터 베이스 이름을 찾아보고 있으면 그 데이터 베이슬르 사용 하고 없으면 새로 만든다.




db를 하면 내가 사용하고 있는 데이터 베이스를 알 수 있다.


show dbs를 하면은 우리가 새로 만든 dbs가 리스트업 될거 같지만 안나온다.

이유는 데이터 베이스는 만들었지만 그안에 도큐먼트를 하나도 안말 들었기 때문에 온전한 데이터 베이스가 될 수 없기 때문에

admin
config
local이 나오낟.



/리스트에서 바로 전에 만든 데이터베이스를 보려면
//최소 한개의 Document를 추가해야 한다.
> db.book.insert({"name": "python", "price": 10000})

도큐먼트르 새로 하나 넣어 줬다.

이제는 edu db가 출력되는 것을 확인 할 수 있다.

db.book에서 book은 컬렉션이다.

컬렉션의 도큐먼트를 꺼내겠다 하면 db. 콜렉션 이름. find 한다

db. 콜렉션 이름. find remove update, delete 한다.


show 하고 collections 하면

book 이나온다.

sh



db.book.find().sort({"price": -1})
여기서 -1을 주면 가격이 높은 순 부터 나온다.
desc와 같은 의미이다.


 db.book.find().sort({"price": -1, "name": 1})

price는 desc가 된다. 가격이 높은순

이름은
ascendent가 된다.

db.book.find({"name": "javascript"}

name이 javascript 인것 만 찾아라


db.book.find({"name": { "$regex" : "^java"}})

$regex는 연산자 이다.

책이름이 java로 시작하는 것을 찾으려고 하면 value에 java를 써주고

$regex를 써준다.

regex는 regular expression을 뜻한다.
정규표현식이라는 말

^java를하면 java로 시작하는 이라는 의미이다.

~끝나는 하고 싶으면 java$ 하면 된다.

시작하는 끝나는 을 안주면 그냥 들어가 있는 이름이다

java가 있는 것은 다꺼내라 라고 해석됨

앞에 ^를 주면 java로 시작하는

뒤에 $를 주면 java로 끝나는 java$



> db.book.find({"price": { "$gt" : 8000}})  

-> 8000원보다 크거나 같은 애들을 꺼내라


> db.book.find({"price": { "$lte" : 8000}})

->> 8000원 보다 작거나 같은 애들을 꺼낸다.





